<?php

/**
 * @file
 * Primary module hooks for Neo Icon module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\neo_icon\IconElement;
use Drupal\neo_icon\IconInterface;

/**
 * Implements hook_theme().
 */
function neo_icon_theme($existing, $type, $theme, $path) {
  $themes = [];
  $themes['neo_icon_element'] = [
    'variables' => [
      'title' => NULL,
      'attributes' => [],
      'position' => 'before',
      'icon' => NULL,
      'icon_only' => FALSE,
    ],
  ];
  $themes['neo_icon'] = [
    'variables' => [
      'icon' => NULL,
      'attributes' => [],
      'children' => [],
    ],
  ];
  $themes['neo_icon_library'] = [
    'render element' => 'element',
  ];
  $themes['neo_icon_browser'] = [
    'variables' => [
      'libraries' => [],
      'library_options' => [],
      'attributes' => [],
      'loader' => [],
    ],
  ];
  return $themes;
}

/**
 * Creates a new IconElement object.
 *
 * @param string|null $text
 *   The text to display with the icon.
 * @param string|null $icon
 *   The icon to display.
 * @param string|null $library
 *   The library to use for the icon.
 * @param array $prefix
 *   The prefix to use for the icon.
 *
 * @return \Drupal\neo_icon\IconElement
 *   The IconElement object.
 */
function neo_icon($text = NULL, $icon = NULL, $library = NULL, array $prefix = []): IconElement {
  return new IconElement($text, $icon, $library, $prefix);
}

/**
 * Creates a new IconElement object.
 *
 * @param string|null $text
 *   The text to display with the icon.
 * @param string|null $icon
 *   The icon to display.
 *
 * @return \Drupal\neo_icon\IconElement
 *   The IconElement object.
 */
function neo_admin_icon($text = NULL, $icon = NULL): IconElement {
  return new IconElement($text, $icon, NULL, ['admin']);
}

/**
 * Implements hook_library_info_build().
 */
function neo_icon_library_info_build() {
  $libraries = [];
  /** @var \Drupal\neo_icon\IconLibraryStorageInterface $storage */
  $storage = \Drupal::service('entity_type.manager')->getStorage('neo_icon_library');
  foreach ($storage->loadMultiple() as $library) {
    /** @var \Drupal\neo_icon\IconLibraryInterface $library */
    if ($stylesheet = $library->getStylesheet()) {
      $library_name = $library->getLibraryName();
      $libraries[$library_name]['css']['theme'][$stylesheet] = [];
      // Add SVG library if necessary.
      if ($library->isSvg()) {
        $libraries[$library_name]['dependencies'][] = 'neo_icon/icon-svg';
      }
    }
  }
  return $libraries;
}

/**
 * Implements hook_page_attachments().
 */
function neo_icon_page_attachments(array &$attachments) {
  /** @var \Drupal\neo_icon\IconLibraryStorageInterface $storage */
  $storage = \Drupal::service('entity_type.manager')->getStorage('neo_icon_library');
  foreach ($storage->loadGlobals() as $library) {
    /** @var \Drupal\neo_icon\IconLibraryInterface $library */
    $attachments['#attached']['library'][] = 'neo_icon/' . $library->getLibraryName();
  }
}

/**
 * Implements hook_form_alter().
 */
function neo_icon_form_alter(&$form, $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity instanceof ConfigEntityInterface) {
      /** @var \Drupal\neo_icon\IconEntityTypePluginManager $iconPluginManager */
      $iconPluginManager = \Drupal::service('neo_icon.entity_type.manager');
      if (!$iconPluginManager->isSupportedEntity($entity)) {
        return;
      }
      if (
        strpos($form['#form_id'], '_edit_form') === FALSE &&
        strpos($form['#form_id'], '_add_form') === FALSE &&
        $form['#form_id'] !== $entity->getEntityTypeId() . '_form'
      ) {
        return;
      }
      $form['neo_icon'] = [
        '#type' => 'neo_icon_select',
        '#title' => t('Icon'),
        '#default_value' => $iconPluginManager->getEntityIcon($entity),
        '#parents' => ['neo_icon'],
        '#weight' => 0,
      ];
      $form['#entity_builders'][] = 'neo_icon_form_config_entity_build';
      // Special handling for media types to avoid core error.
      if ($entity->getEntityTypeId() === 'media_type') {
        if (empty($form['source_dependent']['source_configuration'])) {
          unset($form['neo_icon']);
        }
        else {
          $form['source_dependent']['neo_icon'] = $form['neo_icon'];
          unset($form['neo_icon']);
        }
      }
    }
  }
}

/**
 * Entity form builder for config entities that support icons.
 */
function neo_icon_form_config_entity_build($entity_type, ConfigEntityInterface $entity, &$form, FormStateInterface $form_state) {
  /** @var \Drupal\neo_icon\IconEntityTypePluginManager $iconPluginManager */
  $iconPluginManager = \Drupal::service('neo_icon.entity_type.manager');
  $icon = $form_state->getValue('neo_icon');
  if (!empty($icon) && is_string($icon)) {
    $iconPluginManager->setEntityIcon($entity, $icon);
  }
  else {
    $iconPluginManager->unsetEntityIcon($entity);
  }
  Cache::invalidateTags(['neo_icon']);
}

/**
 * Prepares variables for icon and text display.
 *
 * Default template: neo-icon-element.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the icon
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_neo_icon_browser(array &$variables) {
  $variables['search_input'] = [
    '#type' => 'search',
    '#attributes' => [
      'class' => ['neo-icon-browser--search'],
      'placeholder' => t('Search...'),
    ],
  ];
  if (!empty($variables['library_options']) && count($variables['library_options']) > 1) {
    $variables['library_input'] = [
      '#type' => 'select',
      '#options' => ['' => t('- All Libraries -')] + $variables['library_options'],
      '#attributes' => [
        'class' => ['neo-icon-browser--libraries'],
      ],
    ];
  }
}

/**
 * Prepares variables for eXo icon library templates.
 *
 * Default template: neo-icon-library.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the icon
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_neo_icon_library(array &$variables) {
  /** @var \Drupal\neo_icon\IconLibraryInterface $library */
  $library = $variables['element']['#neo_icon_library'];
  $variables['type'] = $library->getType();
  $variables['content']['browser'] = [
    '#type' => 'neo_icon_browser',
    '#libraries' => [$library->id()],
    '#show_info' => TRUE,
  ];
}

/**
 * Prepares variables for icon and text display.
 *
 * Default template: neo-icon-element.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the icon
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_neo_icon_element(array &$variables) {
  $icon = $variables['icon'];
  // Allow icon_id to be used as #icon.
  if (is_string($icon)) {
    /** @var \Drupal\neo_icon\IconRepositoryInterface $repository */
    $repository = \Drupal::service('neo_icon.repository');
    $icon = $repository->getIcon(NULL, $icon);
  }
  if ($icon instanceof IconInterface) {
    $variables['icon'] = $icon->render();
    if (!is_array($variables['title'])) {
      $variables['icon']['#attributes']['title'] = $variables['title'];
    }
  }
  else {
    // No icon found. We don't want to render anything.
    $variables['icon'] = '';
  }
}

/**
 * Prepares variables for icon and text display.
 *
 * Default template: neo-icon.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the icon
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_neo_icon(array &$variables) {
  /** @var \Drupal\neo_icon\IconInterface $icon */
  $icon = $variables['icon'];
  $variables['tag'] = 'span';
  $variables['attributes']['class'][] = 'neo-icon';
  // Allow icon_id to be used as #icon.
  if (is_string($icon)) {
    /** @var \Drupal\neo_icon\IconRepositoryInterface $repository */
    $repository = \Drupal::service('neo_icon.repository');
    $icon = $repository->getIcon(NULL, $icon);
  }
  if ($icon instanceof IconInterface) {
    $variables['icon'] = $icon;
    $variables['type'] = $icon->getLibrary()->getType();
    $variables['tag'] = $icon->getTag();
    $variables['attributes']['class'][] = 'neo-icon-' . $icon->getLibrary()->getType();
    $variables['attributes']['class'][] = $icon->getSelector();
    $variables['attributes']['aria-hidden'] = 'true';
    $variables['children'] = $icon->getChildren();
    $variables['#attached']['library'][] = 'neo_icon/' . $icon->getLibrary()->getLibraryName();
  }
  else {
    // No icon found. We don't want to render anything.
    $variables['icon'] = '';
  }
}

/**
 * Implements hook_preprocess_table().
 *
 * Preprocess list builder tables.
 */
function neo_icon_preprocess_table(&$variables) {
  if ($entityTypeId = \Drupal::routeMatch()->getRouteObject()->getDefault('_entity_list')) {
    /** @var \Drupal\neo_icon\IconEntityTypePluginManager $iconPluginManager */
    $iconPluginManager = \Drupal::service('neo_icon.entity_type.manager');
    if ($iconPluginManager->isSupportedEntityTypeId($entityTypeId)) {
      foreach ($variables['rows'] as $i => $row) {
        if (!empty($row['cells'])) {
          foreach ([
            'title',
            'name',
          ] as $key) {
            if (isset($row['cells'][$key])) {
              if (isset($row['cells'][$key]['content'])) {
                $variables['rows'][$i]['cells'][$key]['content'] = neo_icon($row['cells'][$key]['content'], NULL, NULL, ['entity.' . $entityTypeId]);
              }
            }
          }
        }
      }
    }
  }
}

function neo_icon_preprocess_node_add_list(&$variables) {
  $variables['types'] = [];
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => Link::fromTextAndUrl(neo_icon($type->label(), NULL, NULL, ['entity.node']), Url::fromRoute('node.add', ['node_type' => $type->id()]))->toString(),
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}
